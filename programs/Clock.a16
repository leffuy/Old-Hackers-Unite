; LEDGs will display the seconds of the clock
; so let us work on incrementing a counter
; using the timer.

	.ORIG 0xFFE0
TCNT:
	.ORIG 0xFFE2
TRES:
	.ORIG 0xFFE4
TCTL:
	.ORIG 0xFFF8
HEX:
        .ORIG 0xFFFC
LEDG:

.ORIG 0x0	; Variables for clock go here.
IntHandAddr:	; Pointer to interrupt handler
.DATA   IntHand
SysStackAddr:
.DATA   SysStack
Seconds:	; Holds the current seconds value
.DATA	0
HEXTime:	; Holds the 24h time in hex
.DATA	0x1200
SecCnt:		; Number of TCNT ticks in 1s
.DATA	1000
FMask2:		; Mask used for second digit
.DATA	0x0F0
FMask3:		; Mask for third digit
.DATA	0xF00
TimeInc2:	; Amount to increase HEXTime by on overflow of 2nd digit
.DATA	0xA0
TimeInc3:	; Amount to increase HEXTime by on overflow of 3nd digit
.DATA	0x600

.ORIG 0x200
SysStack:	; System stack grows down from 0x200

.ORIG 0x200
	; Init interrupts and timer of clock
	XOR	GP,GP,GP	; Zero out GP
	; Set up the interrupt handler
	LW	A0,IntHandAddr(GP)
	WSR	SIH,A0
	; Set up the system stack
	LW	A0,SysStackAddr(GP)
	WSR	SR0,A0

	; Setup the timer device to interrupt every 1s
	; Set IE, CM to 1 and OM, OIE to 0
	ADDI	A0,GP,5
	WSR	SCS,A0
	; Set IE in TCTL
	ADDI	A0,GP,0x10
	SW	A0,TCTL(GP)
	; Set TCNT to interrupt every second
	LW	A0,SecCnt(GP)
	SW	A0,TRES(GP)

done:	; Loop forever here while not dealing with timer interrupt
	BEQ	R0,R0,done

	; interrupt handler for the clock
IntHand:
	; Save user SP in SR1, switch to system SP (in SR0)
	WSR	SR1,SP
	RSR	SP,SR0
	; Save all registers used by the interrupt handler
	ADDI	SP,SP,-4
	SW	A0,0(SP)
	SW	A1,2(SP)

	; Increment Seconds static variable update LEDG
	LW	A0,Seconds(GP)
	ADDI	A0,A0,1

	ADDI	A1,GP,60
	BNE	A1,A0,skip

	; TODO: Here is where we are going to have to inc HEXTIME, check for digits etc
	; This will work I think. It is going to need a lot of branches though ahaha	

skip:	SW	A0,LEDG(GP)
	SW	A0,Seconds(GP)
	; TODO: Update HEX Display...
	
	; Reset Interrupts for timer
	ADDI	A0,GP,0x10
	SW	A0,TCTL(GP)

	; Restore registers (except RV) from stack
	LW	A0,0(SP)
	LW	A1,2(SP)
	ADDI	SP,SP,4
	; Switch back to user stack and return
	WSR	SR0,SP
	RSR	SP,SR1
	RETI

